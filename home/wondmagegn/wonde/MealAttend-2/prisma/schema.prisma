
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
}

model User {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  fullName                String
  email                   String   @unique
  password                String
  role                    String // Super Admin, Admin, User
  status                  String // Active, Inactive
  departmentId            String?
  department              Department? @relation(fields: [departmentId], references: [id])
  passwordChangeRequired  Boolean  @default(true)
  profileImageURL         String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  passwordResetToken      String?  @unique
  passwordResetExpires    DateTime?

  // Self-referencing relation for tracking who created whom
  createdById String?
  createdBy   User?   @relation("UserCreations", fields: [createdById], references: [id])
  createdUsers User[] @relation("UserCreations")

  // Students created by this user
  createdStudents Student[]

  // Attendance scanned by this user
  scannedAttendance AttendanceRecord[]

  // Activity logs by this user
  activityLogs ActivityLog[]

  // Permissions
  canReadStudents      Boolean @default(false)
  canWriteStudents     Boolean @default(false)
  canCreateStudents    Boolean @default(false)
  canDeleteStudents    Boolean @default(false)
  canExportStudents    Boolean @default(false)
  canReadAttendance    Boolean @default(false)
  canExportAttendance  Boolean @default(false)
  canReadActivityLog   Boolean @default(false)
  canReadUsers         Boolean @default(false)
  canWriteUsers        Boolean @default(false)
  canReadDepartments   Boolean @default(false)
  canWriteDepartments  Boolean @default(false)
}

model Student {
  id               String   @id @default(cuid())
  studentId        String   @unique
  name             String
  gender           String?
  classGrade       String?
  profileImageURL  String?
  qrCodeData       String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdById      String?
  createdBy        User?    @relation(fields: [createdById], references: [id])
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String
  status             String
  recordDate         DateTime
  scannedAtTimestamp DateTime?
  scannedById        String?
  scannedBy          User?    @relation(fields: [scannedById], references: [id])
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // This could be userId or email
  userId            String?  // Foreign key to User model
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
}

model SiteSettings {
  id                     Int      @id @default(1)
  siteName               String   @default("MealAttend")
  headerContent          String   @default("MealAttend Information Center")
  idPrefix               String   @default("ADERA")
  theme                  String   @default("default")
  showFeaturesSection    Boolean  @default(true)
  showTeamSection        Boolean  @default(true)
  addisSparkLogoUrl      String?
  leoMaxwellPhotoUrl     String?
  owenGrantPhotoUrl      String?
  eleanorVancePhotoUrl   String?
  sofiaReyesPhotoUrl     String?
  calebFinnPhotoUrl      String?
  defaultAdminPassword   String?
  defaultUserPassword    String?
  idCardLogoUrl          String?
  idCardSchoolName       String?
  idCardTitle            String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model IdCounter {
  type  String @id
  count Int
}
