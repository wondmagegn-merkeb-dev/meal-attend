
import { NextResponse, type NextRequest } from 'next/server';
import prisma from '@/lib/prisma';
import type { UserActivityLog } from '@prisma/client';

export const dynamic = 'force-dynamic';

// GET /api/activity-logs - Fetch all activity logs
export async function GET(request: NextRequest) {
  try {
    const logs = await prisma.userActivityLog.findMany({
      orderBy: {
        activityTimestamp: 'desc',
      },
    });
    return NextResponse.json(logs, { status: 200 });
  } catch (error) {
    console.error('Error fetching activity logs:', error);
    return NextResponse.json({ message: 'Failed to fetch activity logs', error: (error as Error).message }, { status: 500 });
  }
}

// POST /api/activity-logs - Create a new activity log
// Note: In a real app, these logs would likely be generated by backend services, not directly via API by clients.
export async function POST(request: NextRequest) {
  try {
    const body = await request.json() as Partial<Omit<UserActivityLog, 'id' | 'createdAt' | 'activityTimestamp'>>;
    const { userIdentifier, action, details } = body;

    if (!userIdentifier || !action) {
      return NextResponse.json({ message: 'Missing required fields: userIdentifier and action are required.' }, { status: 400 });
    }

    const newLog = await prisma.userActivityLog.create({
      data: {
        userIdentifier,
        action,
        details,
        activityTimestamp: new Date(), // Set timestamp at creation
      },
    });
    return NextResponse.json(newLog, { status: 201 });
  } catch (error) {
    console.error('Error creating activity log:', error);
    return NextResponse.json({ message: 'Failed to create activity log', error: (error as Error).message }, { status: 500 });
  }
}
