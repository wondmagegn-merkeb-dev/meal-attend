
import { NextResponse, type NextRequest } from 'next/server';
import prisma from '@/lib/prisma';
import type { Student } from '@prisma/client'; // Import Prisma's generated Student type

export const dynamic = 'force-dynamic';

async function generateAderaStudentId(): Promise<string> {
  const currentYear = new Date().getFullYear();
    const countForYear = await prisma.student.count({
    where: {
      studentId: {
        startsWith: `ADERA/STU/${currentYear}/`,
      },
    },
  });
  const serialNumber = (countForYear + 1).toString().padStart(5, '0');
  return `ADERA/STU/${currentYear}/${serialNumber}`;
}

// GET /api/students - Fetch all students
export async function GET(request: NextRequest) {
  try {
    const students = await prisma.student.findMany({
      orderBy: {
        createdAt: 'desc',
      },
    });
    return NextResponse.json(students, { status: 200 });
  } catch (error) {
    console.error('Error fetching students:', error);
    return NextResponse.json({ message: 'Failed to fetch students', error: (error as Error).message }, { status: 500 });
  }
}

// POST /api/students - Create a new student
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    // studentId is now generated by the backend
    const { name, gender, classGrade, profileImageURL } = body as Partial<Omit<Student, 'id' | 'studentId' | 'qrCodeData' | 'createdAt' | 'updatedAt'>>;

    if (!name) {
      return NextResponse.json({ message: 'Missing required field: name is required.' }, { status: 400 });
    }
    
    const generatedStudentId = await generateAderaStudentId();
    
    // Check if generated studentId already exists (highly unlikely with good generation, but good practice)
    const existingStudentById = await prisma.student.findUnique({
      where: { studentId: generatedStudentId },
    });

    if (existingStudentById) {
      // This indicates an issue with studentId generation or a very rare collision.
      // Potentially retry generation or return a specific error.
      console.error(`Generated studentId ${generatedStudentId} already exists. This should be rare.`);
      return NextResponse.json({ message: `Generated Student ID ${generatedStudentId} already exists. Please try again.` }, { status: 409 });
    }
    
    const newStudent = await prisma.student.create({
      data: {
        studentId: generatedStudentId, // Use backend-generated studentId
        name,
        gender,
        classGrade,
        profileImageURL,
        // qrCodeData will be set to the Prisma-generated 'id'
        // This ensures qrCodeData is always unique and tied to the internal ID.
      },
    });

    // Set qrCodeData to the generated id
    const studentWithQr = await prisma.student.update({
        where: { id: newStudent.id },
        data: { qrCodeData: newStudent.id }
    });

    return NextResponse.json(studentWithQr, { status: 201 });
  } catch (error) {
    console.error('Error creating student:', error);
    // Prisma's P2002 for unique constraint violation might still occur if studentId generation logic isn't perfect
    // or if qrCodeData (which is the 'id') somehow collides (impossible for CUIDs).
    if ((error as any).code === 'P2002') {
        const target = (error as any).meta?.target as string[] | undefined;
        if (target?.includes('studentId')) {
             return NextResponse.json({ message: `Student with generated ID ${ (error as any).meta?.modelName } already exists. Please try again.` }, { status: 409 });
        }
    }
    return NextResponse.json({ message: 'Failed to create student', error: (error as Error).message }, { status: 500 });
  }
}
