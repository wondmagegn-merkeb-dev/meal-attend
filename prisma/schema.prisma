
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// ==============================================================================
// Models
// ==============================================================================

model User {
  id                      String        @id @default(cuid())
  userId                  String        @unique @default(cuid()) // Human-readable, e.g., ADERA/USR/2024/00001
  fullName                String
  email                   String        @unique
  password                String
  position                String?
  role                    String        @default("User") // e.g., Super Admin, Admin, User
  status                  String        @default("Active") // e.g., Active, Inactive
  passwordChangeRequired  Boolean       @default(true)
  passwordResetRequested  Boolean       @default(false)
  profileImageURL         String?
  passwordResetToken      String?       @unique
  passwordResetExpires    DateTime?
  
  createdById             String?
  createdBy               User?         @relation("UserCreations", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers            User[]        @relation("UserCreations")

  createdStudents         Student[]           @relation("StudentCreations")
  scannedAttendance       AttendanceRecord[]  @relation("ScannedBy")
  activityLogs            ActivityLog[]

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Permissions
  canReadDashboard      Boolean       @default(false)
  canScanId             Boolean       @default(false)
  
  canReadStudents       Boolean       @default(false)
  canWriteStudents      Boolean       @default(false)
  canCreateStudents     Boolean       @default(false)
  canDeleteStudents     Boolean       @default(false)
  canExportStudents     Boolean       @default(false)
  
  canReadAttendance     Boolean       @default(false)
  canExportAttendance   Boolean       @default(false)
  
  canReadActivityLog    Boolean       @default(false)
  
  canReadUsers          Boolean       @default(false)
  canWriteUsers         Boolean       @default(false)
  
  canReadDepartments    Boolean       @default(false)
  canWriteDepartments   Boolean       @default(false)

  @@index([email])
}

model Student {
  id              String      @id @default(cuid())
  studentId       String      @unique // Human-readable, e.g., ADERA/STU/2024/00001
  name            String
  gender          String?     // Male, Female
  classGrade      String?     // e.g., 11A
  profileImageURL String?
  qrCodeData      String?     @unique
  
  createdById     String?
  createdBy       User?       @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull)
  
  attendanceRecords AttendanceRecord[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model AttendanceRecord {
  id                  String    @id @default(cuid())
  attendanceId        String    @unique
  studentId           String
  student             Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  scannedById         String?
  scannedBy           User?     @relation("ScannedBy", fields: [scannedById], references: [id], onDelete: SetNull)

  mealType            String // BREAKFAST, LUNCH, DINNER
  status              String // PRESENT, ABSENT
  recordDate          DateTime  @db.Date
  scannedAtTimestamp  DateTime  @default(now())

  @@index([studentId, recordDate, mealType])
}

model ActivityLog {
  id                  String    @id @default(cuid())
  logId               String    @unique
  userIdentifier      String    // This stores the UserID or email address for context
  userId              String?
  user                User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  action              String    // e.g., LOGIN_SUCCESS, STUDENT_CREATED
  details             String?
  activityTimestamp   DateTime  @default(now())
}

model TeamMember {
  id            String    @id @default(cuid())
  name          String
  role          String
  avatarUrl     String?
  bio           String
  displayOrder  Int       @default(0)
  isCeo         Boolean   @default(false)
  isVisible     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model HomepageFeature {
    id            String    @id @default(cuid())
    icon          String
    title         String
    description   String
    displayOrder  Int       @default(0)
    isVisible     Boolean   @default(true)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}


// ==============================================================================
// System & Settings
// ==============================================================================

model AppSettings {
  id                        Int       @id @default(1)
  siteName                  String    @default("MealAttend")
  idPrefix                  String    @default("ADERA")
  schoolName                String    @default("Tech University")
  idCardTitle               String    @default("STUDENT ID")
  colorTheme                String    @default("default") // e.g., 'default', 'forest', 'ocean'
  showHomepage              Boolean   @default(true)
  showTeamSection           Boolean   @default(true)
  showFeaturesSection       Boolean   @default(true)
  homepageSubtitle          String
  
  companyLogoUrl            String?
  idCardLogoUrl             String?
  
  defaultUserPassword       String?
  defaultAdminPassword      String?
  defaultSuperAdminPassword String?
  
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}


// Counter for generating sequential IDs
model IdCounter {
  type  String @id // 'STUDENT', 'USER', 'DEPARTMENT'
  count Int
}
