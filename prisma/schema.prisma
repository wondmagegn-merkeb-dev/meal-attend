
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
}

model User {
  id                     String      @id @default(cuid())
  userId                 String      @unique
  fullName               String
  email                  String      @unique
  password               String
  role                   String      @default("User")
  status                 String      @default("Active")
  departmentId           String?
  department             Department? @relation(fields: [departmentId], references: [id])
  passwordChangeRequired Boolean     @default(true)
  profileImageURL        String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  passwordResetToken   String?     @unique
  passwordResetExpires DateTime?
  
  activityLogs           ActivityLog[]
  createdStudents        Student[]     @relation("CreatedBy")
}

model Student {
  id                String   @id @default(cuid())
  studentId         String   @unique
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  createdById       String?
  createdBy         User?    @relation("CreatedBy", fields: [createdById], references: [id])

  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String
  status             String
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())

  @@unique([studentId, mealType, recordDate])
}

model ActivityLog {
  id                 String   @id @default(cuid())
  logId              String   @unique
  userIdentifier     String
  userId             String?
  user               User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action             String
  details            String?
  activityTimestamp  DateTime @default(now())
}

model IdCounter {
  type  String @id
  count Int    @default(0)
}

    