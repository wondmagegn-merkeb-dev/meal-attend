
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  fullName               String
  email                  String    @unique
  password               String
  role                   String // Super Admin, Admin, User
  status                 String // Active, Inactive
  departmentId           String?
  passwordChangeRequired Boolean   @default(true)
  profileImageURL        String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  passwordResetToken     String?   @unique
  passwordResetExpires   DateTime?

  department      Department? @relation(fields: [departmentId], references: [id])
  createdById     String?
  createdBy       User?       @relation("UserCreations", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers    User[]      @relation("UserCreations")
  createdStudents Student[]   @relation("StudentCreations")

  scannedAttendanceRecords AttendanceRecord[]
  activityLogs             ActivityLog[]

  // Permissions
  canReadStudents     Boolean @default(false)
  canWriteStudents    Boolean @default(false)
  canCreateStudents   Boolean @default(false)
  canDeleteStudents   Boolean @default(false)
  canExportStudents   Boolean @default(false)
  canReadAttendance   Boolean @default(false)
  canExportAttendance Boolean @default(false)
  canReadActivityLog  Boolean @default(false)
  canReadUsers        Boolean @default(false)
  canWriteUsers       Boolean @default(false)
  canReadDepartments  Boolean @default(false)
  canWriteDepartments Boolean @default(false)
}

model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String?
  createdBy         User?              @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull)
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  mealType           String // BREAKFAST, LUNCH, DINNER
  status             String // PRESENT, ABSENT
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())
  scannedById        String?

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scannedBy User?   @relation(fields: [scannedById], references: [id], onDelete: SetNull)
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // Stores User ID or email for failed attempts
  userId            String?  // Foreign key to User table
  action            String
  details           String?
  activityTimestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Model to store auto-incrementing counters for human-readable IDs
model IDCounter {
  type  String @id // 'STUDENT', 'USER', 'DEPARTMENT', etc.
  count Int
}

model SiteSettings {
  id                    Int     @id @default(1)
  siteName              String  @default("MealAttend")
  headerContent         String  @default("MealAttend Information Center")
  idPrefix              String  @default("ADERA")
  theme                 String  @default("default")
  showFeaturesSection   Boolean @default(true)
  showTeamSection       Boolean @default(true)
  addisSparkLogoUrl     String?
  leoMaxwellPhotoUrl    String?
  owenGrantPhotoUrl     String?
  eleanorVancePhotoUrl  String?
  sofiaReyesPhotoUrl    String?
  calebFinnPhotoUrl     String?
  defaultAdminPassword  String?
  defaultUserPassword   String?
  idCardLogoUrl         String?
  idCardSchoolName      String?
  idCardTitle           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
