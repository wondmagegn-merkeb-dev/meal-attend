
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique // School-specific or custom student ID
  name              String
  gender            String?            // Was Gender enum. Consider application-level validation.
  classGrade        String?            @map("class") // Renamed field 'class' to 'classGrade' to avoid keyword conflict
  profileImageURL   String?
  qrCodeData        String?            @unique // Optional: Data to be encoded in QR Code (e.g., student's unique ID)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]

  @@map("students")
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("departments")
}

model User {
  id                       String      @id @default(cuid())
  userId                   String      @unique // Formatted ADERA ID: ADERA/USR/YYYY/SERIAL
  fullName                 String
  email                    String      @unique
  passwordHash             String // Store hashed passwords only
  role                     String      // Was Role enum. 'Admin' or 'User'. Consider application-level validation.
  profileImageURL          String?
  passwordChangeRequired Boolean     @default(false)
  departmentId             String?
  department               Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt

  @@map("users")
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  studentInternalId  String
  student            Student  @relation(fields: [studentInternalId], references: [id], onDelete: Cascade)
  recordDate         DateTime // Stores YYYY-MM-DD. Removed @db.Date
  mealType           String   // Was MealType enum. 'Breakfast', 'Lunch', 'Dinner'. Consider application-level validation.
  scannedAtTimestamp DateTime? // Full timestamp of scan
  status             String   // Was AttendanceStatus enum. 'Present' or 'Absent'. Consider application-level validation.
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([studentInternalId, recordDate, mealType], name: "unique_attendance_constraint")
  @@map("attendance_records")
}

model UserActivityLog {
  id                String   @id @default(cuid())
  userIdentifier    String // ADERA User ID or special values like system/unknown_user
  activityTimestamp DateTime
  action            String
  details           String? // Removed @db.Text
  createdAt         DateTime @default(now())

  @@map("user_activity_logs")
}
