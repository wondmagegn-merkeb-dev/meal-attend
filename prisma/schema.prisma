
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id                       String     @id @default(cuid())
  userId                   String     @unique // ADERA/USR/YYYY/SERIAL
  fullName                 String
  departmentId             String?
  email                    String     @unique
  passwordHash             String // Store hashed passwords only
  role                     String // Was Role enum, now String. API should handle 'Admin', 'User'
  profileImageURL          String?
  passwordChangeRequired   Boolean    @default(false)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  department               Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
}

model Student {
  id                String   @id @default(cuid())
  studentId         String   @unique // "ADERA/STU/YYYY/NNNNN" - Will be auto-generated
  name              String
  gender            String?  // 'Male', 'Female', 'Other', ''
  classGrade        String?  // e.g., "10A"
  profileImageURL   String?
  qrCodeData        String?  @unique // Should match 'id' after creation
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                  String   @id @default(cuid())
  studentInternalId   String   // References students.id
  recordDate          DateTime // YYYY-MM-DD (stored as DateTime, but only date part is relevant for uniqueness)
  mealType            String   // Was MealType enum, now String. API should handle 'Breakfast', 'Lunch', 'Dinner'
  scannedAtTimestamp  DateTime? // Full timestamp of scan
  status              String   // Was AttendanceStatus enum, now String. API should handle 'Present', 'Absent'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  student             Student  @relation(fields: [studentInternalId], references: [id], onDelete: Cascade)

  @@unique([studentInternalId, recordDate, mealType], name: "unique_attendance_constraint")
}

model UserActivityLog {
  id                String   @id @default(cuid())
  userIdentifier    String   // Can be ADERA User ID or special values like system/unknown_user
  activityTimestamp DateTime
  action            String
  details           String?
  createdAt         DateTime @default(now())
}
