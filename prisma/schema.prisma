
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppSettings {
  id                    Int     @id @default(1)
  siteName              String  @default("MealAttend")
  idPrefix              String  @default("ADERA")
  schoolName            String  @default("Tech University")
  idCardTitle           String  @default("STUDENT ID")
  colorTheme            String  @default("default")
  showHomepage          Boolean @default(true)
  showTeamSection       Boolean @default(true)
  companyLogoUrl        String?
  idCardLogoUrl         String?
  defaultUserPassword   String?
  defaultAdminPassword  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model User {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  fullName               String
  email                  String    @unique
  password               String
  position               String?
  role                   String    // "Super Admin", "Admin", "User"
  status                 String    // "Active", "Inactive"
  passwordChangeRequired Boolean   @default(true)
  profileImageURL        String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  createdById String?
  createdBy   User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers User[]   @relation("UserCreations")

  createdStudents    Student[]
  scannedRecords     AttendanceRecord[]
  activityLogs       ActivityLog[]

  // Permissions
  canReadStudents     Boolean @default(false)
  canWriteStudents    Boolean @default(false)
  canCreateStudents   Boolean @default(false)
  canDeleteStudents   Boolean @default(false)
  canExportStudents   Boolean @default(false)

  canReadAttendance   Boolean @default(false)
  canExportAttendance Boolean @default(false)

  canReadActivityLog  Boolean @default(false)
  canReadUsers        Boolean @default(false)
  canWriteUsers       Boolean @default(false)
  
  // Kept for schema completeness, but UI is removed
  canReadDepartments  Boolean @default(false)
  canWriteDepartments Boolean @default(false)

}

model Student {
  id              String   @id @default(cuid())
  studentId       String   @unique
  name            String
  gender          String?
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id], onDelete: SetNull)

  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  mealType           String   // "BREAKFAST", "LUNCH", "DINNER"
  status             String   // "PRESENT", "ABSENT"
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scannedById String?
  scannedBy User? @relation(fields: [scannedById], references: [id], onDelete: SetNull)

  @@unique([studentId, mealType, recordDate])
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String
  userId            String?  // The internal user ID, if available
  action            String
  details           String?
  activityTimestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model TeamMember {
  id           String  @id @default(cuid())
  name         String
  role         String
  bio          String
  avatarUrl    String?
  displayOrder Int     @default(0)
  isCeo        Boolean @default(false)
  isVisible    Boolean @default(true)
}

// Model for auto-incrementing custom IDs
model IdCounter {
  type  String @id // e.g., "STUDENT", "USER", "DEPARTMENT"
  count Int
}
