// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AppSettings {
  id                        Int      @id @default(1)
  siteName                  String   @default("MealAttend")
  idPrefix                  String   @default("ADERA")
  schoolName                String   @default("Tech University")
  idCardTitle               String   @default("STUDENT ID")
  colorTheme                String   @default("default") // e.g., "default", "ocean", "forest"
  showHomepage              Boolean  @default(true)
  showTeamSection           Boolean  @default(true)
  showFeaturesSection       Boolean  @default(true)
  homepageSubtitle          String   @default("Learn more about our system and the team behind it.")
  companyLogoUrl            String?
  idCardLogoUrl             String?
  defaultUserPassword       String?
  defaultAdminPassword      String?
  defaultSuperAdminPassword String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model User {
  id                      String    @id @default(cuid())
  userId                  String    @unique @default(cuid())
  fullName                String
  email                   String    @unique
  password                String
  position                String?
  role                    String    @default("User") // Super Admin, Admin, User
  status                  String    @default("Active") // Active, Inactive
  passwordChangeRequired  Boolean   @default(true)
  passwordResetRequested  Boolean   @default(false)
  profileImageURL         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  canSeeAllRecords        Boolean   @default(false) // If true, user can see all data, not just their own

  // Permissions
  canReadDashboard      Boolean @default(false)
  canScanId             Boolean @default(false)
  canReadStudents       Boolean @default(false)
  canWriteStudents      Boolean @default(false)
  canCreateStudents     Boolean @default(false)
  canDeleteStudents     Boolean @default(false)
  canExportStudents     Boolean @default(false)
  canReadAttendance     Boolean @default(false)
  canExportAttendance   Boolean @default(false)
  canReadActivityLog    Boolean @default(false)
  canReadUsers          Boolean @default(false)
  canWriteUsers         Boolean @default(false)

  // Relations
  createdById    String?
  createdBy      User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers   User[]    @relation("UserCreations")
  createdStudents Student[] @relation("StudentCreations")
  scannedRecords  AttendanceRecord[] @relation("ScannedByUsers")
  activityLogs    ActivityLog[]
}

model Student {
  id              String   @id @default(cuid())
  studentId       String   @unique
  name            String
  gender          String?
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  attendanceRecords AttendanceRecord[]
  createdById       String?
  createdBy         User?              @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  recordDate         DateTime @db.Date
  mealType           String // BREAKFAST, LUNCH, DINNER
  status             String // PRESENT, ABSENT
  scannedAtTimestamp DateTime @default(now())

  // Relations
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scannedById        String?
  scannedBy          User?    @relation("ScannedByUsers", fields: [scannedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([studentId, recordDate, mealType])
}


model ActivityLog {
  id                  String   @id @default(cuid())
  logId               String   @unique
  userIdentifier      String // Can be User ID or email for failed attempts
  action              String
  details             String?
  activityTimestamp   DateTime @default(now())

  // Relations
  userId              String?
  user                User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

// Model for auto-incrementing IDs
model IDCounter {
  type  String @id // 'STUDENT', 'USER', 'ATTENDANCE', 'ACTIVITY_LOG'
  count Int    @default(0)
}

model HomepageFeature {
    id            String  @id @default(cuid())
    icon          String
    title         String
    description   String
    displayOrder  Int
    isVisible     Boolean @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model TeamMember {
    id            String  @id @default(cuid())
    name          String
    role          String
    avatarUrl     String?
    bio           String
    displayOrder  Int
    isCeo         Boolean @default(false)
    isVisible     Boolean @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
