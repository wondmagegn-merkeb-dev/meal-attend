
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
}

model User {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  fullName                String
  email                   String        @unique
  password                String?
  role                    String
  status                  String
  departmentId            String?
  department              Department?   @relation(fields: [departmentId], references: [id])
  passwordChangeRequired  Boolean       @default(false)
  profileImageURL         String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  activityLogs            ActivityLog[]
}

model Student {
  id              String             @id @default(cuid())
  studentId       String             @unique
  name            String
  gender          String?
  classGrade      String?
  profileImageURL String?
  qrCodeData      String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  attendance      AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String // e.g., BREAKFAST, LUNCH, DINNER
  status             String // e.g., PRESENT, ABSENT
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())

  @@index([studentId, mealType, recordDate])
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // This could be the User's ADERA ID or email if unauthenticated
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
}

model IdCounter {
  type  String @id
  count Int
}
