// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppSettings {
  id              Int      @id @default(1)
  siteName        String   @default("MealAttend")
  idPrefix        String   @default("ADERA")
  schoolName      String   @default("Tech University")
  colorTheme      String   @default("default")
  showHomepage    Boolean  @default(true)
  showTeamSection Boolean  @default(true)
  companyLogoUrl  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model IDCounter {
  type  String @id
  count Int    @default(0)
}

model User {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  fullName                 String
  email                    String    @unique
  password                 String
  position                 String?
  role                     String // "Super Admin", "Admin", "User"
  status                   String // "Active", "Inactive"
  passwordChangeRequired   Boolean   @default(true)
  profileImageURL          String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  passwordResetToken       String?   @unique
  passwordResetExpires     DateTime?
  createdById              String?
  createdBy                User?     @relation("UserCreations", fields: [createdById], references: [id], onUpdate: NoAction, onDelete: NoAction)
  createdUsers             User[]    @relation("UserCreations")
  createdStudents          Student[] @relation("StudentCreations")
  scannedAttendanceRecords AttendanceRecord[]

  // Permissions
  canReadStudents      Boolean @default(false)
  canWriteStudents     Boolean @default(false)
  canCreateStudents    Boolean @default(false)
  canDeleteStudents    Boolean @default(false)
  canExportStudents    Boolean @default(false)
  canReadAttendance    Boolean @default(false)
  canExportAttendance  Boolean @default(false)
  canReadActivityLog   Boolean @default(false)
  canReadUsers         Boolean @default(false)
  canWriteUsers        Boolean @default(false)
  canReadDepartments   Boolean @default(false) // Obsolete, but kept for migration safety
  canWriteDepartments  Boolean @default(false) // Obsolete, but kept for migration safety

  activityLogs ActivityLog[]
}

model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique
  name              String
  gender            String? // "Male", "Female"
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String?
  createdBy         User?              @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull)
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String // "BREAKFAST", "LUNCH", "DINNER"
  status             String // "PRESENT", "ABSENT"
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())
  scannedById        String?
  scannedBy          User?    @relation(fields: [scannedById], references: [id], onDelete: SetNull)
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // This could be userId or email on failed login
  userId            String?  // Foreign key to User model
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
}
