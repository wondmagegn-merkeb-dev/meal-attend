// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Stores global settings for the application
model AppSettings {
  id                    Int      @id @default(1)
  siteName              String   @default("MealAttend")
  idPrefix              String   @default("ADERA")
  schoolName            String   @default("Tech University")
  idCardTitle           String   @default("STUDENT ID")
  colorTheme            String   @default("default")
  showHomepage          Boolean  @default(true)
  showTeamSection       Boolean  @default(true)
  showFeaturesSection   Boolean  @default(true)
  homepageSubtitle      String   @default("Learn more about our system and the team behind it.")
  companyLogoUrl        String?
  idCardLogoUrl         String?
  defaultUserPassword   String?
  defaultAdminPassword  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// User model for authentication and authorization
model User {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  fullName                 String
  email                    String    @unique
  password                 String
  position                 String?
  role                     String // "Super Admin", "Admin", "User"
  status                   String // "Active", "Inactive"
  passwordChangeRequired   Boolean   @default(true)
  profileImageURL          String?
  passwordResetToken       String?   @unique
  passwordResetExpires     DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  createdById              String?
  createdBy                User?     @relation("UserCreations", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers             User[]    @relation("UserCreations")
  createdStudents          Student[] @relation("StudentCreations")
  scannedAttendanceRecords AttendanceRecord[]
  activityLogs             ActivityLog[]

  // Permissions
  canScanId           Boolean @default(false)
  canReadStudents     Boolean @default(false)
  canWriteStudents    Boolean @default(false)
  canCreateStudents   Boolean @default(false)
  canDeleteStudents   Boolean @default(false)
  canExportStudents   Boolean @default(false)
  canReadAttendance   Boolean @default(false)
  canExportAttendance Boolean @default(false)
  canReadActivityLog  Boolean @default(false)
  canReadUsers        Boolean @default(false)
  canWriteUsers       Boolean @default(false)
  canReadDepartments  Boolean @default(false) // Obsolete but kept for safety
  canWriteDepartments Boolean @default(false) // Obsolete but kept for safety
}

// Student model
model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String?
  createdBy         User?              @relation("StudentCreations", fields: [createdById], references: [id], onDelete: SetNull)
  attendanceRecords AttendanceRecord[]
}

// Attendance record model
model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String
  status             String
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime @default(now())
  scannedById        String?
  scannedBy          User?    @relation(fields: [scannedById], references: [id], onDelete: SetNull)
}

// Activity log model
model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String // Stores UserID or email for logs
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// New model for Team Members
model TeamMember {
  id           String  @id @default(cuid())
  name         String
  role         String
  bio          String
  avatarUrl    String?
  displayOrder Int     @default(0)
  isCeo        Boolean @default(false)
  isVisible    Boolean @default(true)
}

// New model for Homepage Features
model HomepageFeature {
  id          String  @id @default(cuid())
  icon        String
  title       String
  description String
  displayOrder Int    @default(0)
  isVisible   Boolean @default(true)
}

// Counter for generating sequential IDs
model IdCounter {
  type  String @id
  count Int
}
