
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Used to generate unique, sequential, and formatted IDs (e.g., ADERA/USR/2024/00001)
model IdCounter {
  type  String @id
  count Int    @default(0)
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique // e.g., ADERA/DEP/2024/00001
  name         String @unique
  users        User[]
}

model User {
  id                     String    @id @default(cuid())
  userId                 String    @unique // e.g., ADERA/USR/2024/00001
  fullName               String
  email                  String    @unique
  password               String
  role                   String    // e.g., Admin, User
  status                 String    // e.g., Active, Inactive
  departmentId           String?
  department             Department? @relation(fields: [departmentId], references: [id])
  passwordChangeRequired Boolean   @default(false)
  profileImageURL        String?
  passwordResetToken     String?   @unique
  passwordResetExpires   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdStudents   Student[]         @relation("CreatedBy")
  scannedRecords    AttendanceRecord[] @relation("ScannedBy")
  activityLogs      ActivityLog[]
}

model Student {
  id              String   @id @default(cuid())
  studentId       String   @unique // e.g., ADERA/STU/2024/00001
  name            String
  gender          String?  // e.g., Male, Female
  classGrade      String?  // e.g., 12A, 11B
  profileImageURL String?
  qrCodeData      String?  @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])

  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique // e.g., ADERA/ATT/2024/00001
  studentId          String
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String   // e.g., BREAKFAST, LUNCH, DINNER
  status             String   // e.g., PRESENT, ABSENT
  recordDate         DateTime @db.Date // Store only the date part
  scannedAtTimestamp DateTime @default(now())

  scannedById String?
  scannedBy   User?   @relation("ScannedBy", fields: [scannedById], references: [id])
  
  @@unique([studentId, mealType, recordDate]) // Ensures one record per student, per meal, per day
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique // e.g., ADERA/LOG/2024/00001
  userIdentifier    String   // Stores the public ID (ADERA/USR/...) or email for failed logins
  userId            String?  // The internal cuid of the user
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String   // e.g., LOGIN_SUCCESS, STUDENT_CREATE_SUCCESS
  details           String?  // e.g., "Created student ID: ADERA/STU/..."
  activityTimestamp DateTime @default(now())
}
