
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
}

model User {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  fullName               String
  email                  String    @unique
  password               String
  role                   String    @default("User") // Admin, User
  status                 String    @default("Active") // Active, Inactive
  departmentId           String?
  passwordChangeRequired Boolean   @default(true)
  profileImageURL        String?   @db.Text // Changed from String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  activityLogs           ActivityLog[]
  department             Department? @relation(fields: [departmentId], references: [id])
  
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
}

model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?            @db.Text // Changed from String?
  qrCodeData        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String   @id @default(cuid())
  attendanceId       String   @unique
  studentId          String
  mealType           String // BREAKFAST, LUNCH, DINNER
  status             String // PRESENT, ABSENT
  recordDate         DateTime @db.Date
  scannedAtTimestamp DateTime?
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id                String   @id @default(cuid())
  logId             String   @unique
  userIdentifier    String
  userId            String?  
  action            String
  details           String?
  activityTimestamp DateTime @default(now())
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model IdCounter {
  type  String @id
  count Int    @default(0)
}
