
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Department {
  id           String @id @default(cuid())
  departmentId String @unique
  name         String @unique
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  fullName                 String
  email                    String    @unique
  password                 String
  role                     String    @default("User") // Super Admin, Admin, User
  status                   String    @default("Active") // Active, Inactive
  departmentId             String?
  department               Department? @relation(fields: [departmentId], references: [id])
  passwordChangeRequired   Boolean   @default(true)
  profileImageURL          String?
  passwordResetToken       String?   @unique
  passwordResetExpires     DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  createdById              String?
  createdBy                User?     @relation("UserCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers             User[]    @relation("UserCreatedBy")
  
  createdStudents          Student[] @relation("StudentCreatedBy")

  scannedAttendanceRecords AttendanceRecord[]
  activityLogs             ActivityLog[]

  // Permissions
  canReadStudents       Boolean @default(false)
  canWriteStudents      Boolean @default(false)
  canCreateStudents     Boolean @default(false)
  canDeleteStudents     Boolean @default(false)
  canExportStudents     Boolean @default(false)
  canReadAttendance     Boolean @default(false)
  canExportAttendance   Boolean @default(false)
  canReadActivityLog    Boolean @default(false)
  canReadUsers          Boolean @default(false)
  canWriteUsers         Boolean @default(false)
  canReadDepartments    Boolean @default(false)
  canWriteDepartments   Boolean @default(false)
}

model Student {
  id                String   @id @default(cuid())
  studentId         String   @unique
  name              String
  gender            String?
  classGrade        String?
  profileImageURL   String?
  qrCodeData        String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  createdById       String?
  createdBy         User?    @relation("StudentCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id                 String    @id @default(cuid())
  attendanceId       String    @unique
  studentId          String
  student            Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealType           String
  status             String
  recordDate         DateTime  @db.Date
  scannedAtTimestamp DateTime?
  
  scannedById        String?
  scannedBy          User?     @relation(fields: [scannedById], references: [id], onDelete: SetNull)

  @@unique([studentId, mealType, recordDate])
}

model ActivityLog {
  id                 String   @id @default(cuid())
  logId              String   @unique
  userIdentifier     String   // Stores the ADERA ID or email for display
  userId             String?  // Links to the internal user ID, if available
  user               User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action             String
  details            String?
  activityTimestamp  DateTime @default(now())
}

model IdCounter {
  type  String @id
  count Int    @default(0)
}

model SiteSettings {
  id                  Int      @id @default(1)
  siteName            String   @default("MealAttend")
  headerContent       String   @default("MealAttend Information Center")
  idPrefix            String   @default("ADERA")
  theme               String   @default("default")
  showFeaturesSection Boolean  @default(true)
  showTeamSection     Boolean  @default(true)
  addisSparkLogoUrl   String?
  leoMaxwellPhotoUrl  String?
  owenGrantPhotoUrl   String?
  eleanorVancePhotoUrl String?
  sofiaReyesPhotoUrl  String?
  calebFinnPhotoUrl   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
